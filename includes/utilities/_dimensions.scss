@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $value in $z-index {
      .z-index#{$infix}-#{$value} {
        z-index: $value;
      }
    }
  }
}

/*transforms*/
.transform-y-center {
  transform: translateY(-50%);
}
.transform-y-100 {
  transform: translateY(100%);
}
.transform-y-n100 {
  transform: translateY(-100%);
}
.transform-x-center {
  transform: translateX(-50%);
}
.transform-x-center-y-bottom {
  transform: translate(-50%,100%);
}
.absolute--center-position {
  top:50%;
  left:50%;
  transform: translate(-50%,-50%);
}
/*rotates*/
.rotate {
  transform: rotate(0deg);
  transition: $transition-all;
  &.rotate-n180 {
    transform: rotate(-180deg);
  }
  &.rotate-180 {
    transform: rotate(180deg);
  }
  &.rotate-90 {
    transform: rotate(90deg);
  }
}

/*Width/Height/Min-Width/Min-Height*/

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop,$abbrev in (height:h, width:w, flex:w-basis, min-height:min-height, max-height:max-height, min-width:min-width, max-width:max-width, top:top, left:left, right:right, bottom:bottom) {
      @each $value in $dimensions {
        .#{$abbrev}#{$infix}-#{$value} {
          @if $prop==flex {
            width: $value !important;
            #{$prop}: 0 0 $value !important;
          } @else {
            #{$prop}: $value !important;
          }
        }
      }
    }

  }
}


@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop,$abbrev in (flex:w-basis,top:top,left:left,right:right,bottom:bottom,width:w,height:h,padding-top:pt) {

      @each $size, $length in $sizes {
        .#{$abbrev}#{$infix}-#{$size} {
          @if $prop==flex {
            width: $length !important;
            #{$prop}: 0 0 $length !important;
          } @else {
            #{$prop}: $length !important;
          }
        }
      }
    }

    @each $abbrev,$prop in (height:initial, width:initial, min-height:auto, max-height:auto, min-width:auto,max-width:auto,top:initial,left:initial,right:initial,bottom:initial) {
      .#{$abbrev}#{$infix}-#{$prop} {
        #{$abbrev}: $prop !important;
      }
    }

    @each $prop in (relative,fixed,absolute,sticky) {

      @if $prop==sticky {
        .position#{$infix}-#{$prop} {
          position: $prop !important;
          position: -webkit-sticky;
        }
      } @else {
        .position#{$infix}-#{$prop} {
          position: $prop !important;
        }
      }
    }
  }
}

.mw-100 { max-width: 100% !important; }
.mh-100 { max-height: 100% !important; }

// Viewport additional helpers

.min-vw-100 { min-width: 100vw !important; }
.min-vh-100 { min-height: 100vh !important; }
.max-vh-calc { max-height: calc(100vh - 230px) !important; }

.vw-100 { width: 100vw !important; }
.vh-100 { height: 100vh !important; }
.vh-results-100 { height: calc(100vh - 99px) !important; }
